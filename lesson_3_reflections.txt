1. When would you want to use a remote repository rather than keeping all your work local?
	- When you're working on a solo project and want to keep a backup in the cloud
	- When you're working on a solo project from multiple devices
	- When you're working on a colaborative project

2. Why might you want to always pull manually rather than having Git automatically stay up-to-date with your remote repository?
	Some commits performed locally may not be ready for publishing to the public. For example, after merging
	a new feature into the master branch, you'd need to commit right away, but you probably want to 
	take some time to check for bugs before publishing your project with that new feature included. 
	
3. Describe the differences between forks, clones, and branches. When would you use one instead of another?
	Branches occur within the same repository. They are different versions of the project that might be
	merged someday. Clones are the same version of the project. If you have the right permissions,
	you can push your clone back to the original author's repository. (I think!) A fork creates a brand
	new project based on the original, and links back to the original, but changes only apply to the fork.
	
4. What is the benefit of having a copy of the last known state of the remote stored locally?
	If you lose internet connection for any reason you can still incorporate changes made remotely
	to your local files if you've kept up-to-date.
	
5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	Without using github, I would probably try to email a zip of my project. But gmail doesn't let you do that!!
	So I would email them a rar file instead. Then I'd patiently wait for them to finish whatever changes 
	they were working on, without daring to change anything myself. And we'd go back and forth like that.