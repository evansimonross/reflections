1. What happens when you initialize a repository? Why do you need to do it?
	Initializing a repository puts a hidden .git folder into the directory. This folder stores important 
	metadata which git uses for all of its special functions. An initial commit is not created, however.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is an intermediary between the two. The working directory is what you're directly
	interacting with and the repository is what git interacts with. Rather than chucking everything 
	into the repository	willy-nilly, git gives the option of setting it all up in the staging area 
	first so you can be specific about what you want to commit, how, and when. 

3. How can you use the staging area to make sure you have one commit per logical change?
	If you've made changes to separate files that weren't logically connected, you can stage only one
	of those files, commit, then stage and commit the other. If all changed files are part of the same
	logical change, you can stage them all and then commit.
	
4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches are useful to keep separate versions of your project. For example, for implementing
	experimental changes while maintaining a useable master project. Branches allow you you easily
	switch between different versions of the project using normal human branch names rather than 
	convoluted commit IDs.