1. What happens when you initialize a repository? Why do you need to do it?
	Initializing a repository puts a hidden .git folder into the directory. This folder stores important 
	metadata which git uses for all of its special functions. An initial commit is not created, however.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is an intermediary between the two. The working directory is what you're directly
	interacting with and the repository is what git interacts with. Rather than chucking everything 
	into the repository	willy-nilly, git gives the option of setting it all up in the staging area 
	first so you can be specific about what you want to commit, how, and when. 

3. How can you use the staging area to make sure you have one commit per logical change?
	If you've made changes to separate files that weren't logically connected, you can stage only one
	of those files, commit, then stage and commit the other. If all changed files are part of the same
	logical change, you can stage them all and then commit.
	
4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches are useful to keep separate versions of your project. For example, for implementing
	experimental changes while maintaining a useable master project. Branches allow you you easily
	switch between different versions of the project using normal human branch names rather than 
	convoluted commit IDs.
	
5. How do the diagrams help you visualize the branch structure?
	For me, actually, they don't really help so much. I'm not much of a visual learner. 
	I can understand how those diagrams would help some people understand the concept of reachability,
	but for me just saying in words "a commit that is not an ancestor of any branch's tip" is
	enough to convey it. 
	
	Every commit has a parent which is the commit it was modified from.	A commit's ancestry traces 
	back to the repository initialization. The log function only includes the ancestry of the current
	branch. Thus, a commit that is not an ancestor of any branch's tip will	never appear in the log, 
	and will be functionally non-existant. That's why creating new branches	is so important. 
	
	This verbal description does much more to help me understand branch structure and its importance
	in version control through git than the diagram, but I imagine visual learners would enjoy
	parsing the mess that is the paragraph above!
	
6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	The commit made from the merge has 2 parents, and then two sets of ancestors. The branch that was
	merged into another can now be deleted because the branch it was merged into now refers back to
	all of its commits. Deleting a branch only deletes the labels, but deleting an unmerged branch
	renders all of its commits unreachable, effectively abandoning them. 
	
7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Automatic merging saves tons of time. If your branches implement separate features and don't
	interface with one another, it will be very reliable. On the other hand, any automated process
	involving code has a chance to fail. The conflict detection is very sensitive, though, which mitigates
	the possibility of failure.